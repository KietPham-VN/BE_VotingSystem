// <auto-generated />
using System;
using BE_VotingSystem.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE_VotingSystem.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250912093940_AllowNullSemester")]
    partial class AllowNullSemester
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte?>("Semester")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Provider", "ProviderId")
                        .IsUnique();

                    b.ToTable("account", null, t =>
                        {
                            t.HasCheckConstraint("CK_Account_Semester_Range", "(Semester IS NULL OR (Semester >= 1 AND Semester <= 9))");

                            t.HasCheckConstraint("CK_Account_StudentCode_Format", "(StudentCode IS NULL OR UPPER(StudentCode) REGEXP '^(SS|SA|SE|CS|CA|CE|HS|HE|HA|QS|QA|QE|DS|DA|DE)[0-9]{6}$')");
                        });
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Expires");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("refresh_token", null, t =>
                        {
                            t.HasCheckConstraint("CK_RefreshToken_Expires_Future", "`Expires` IS NOT NULL");
                        });
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BE_VotingSystem.Domain.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.Account", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
