// <auto-generated />
using System;
using BE_VotingSystem.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE_VotingSystem.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914181546_Enforce_One_FeedbackVote_Per_Account_FK")]
    partial class Enforce_One_FeedbackVote_Per_Account_FK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BanReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte?>("Semester")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<byte>("VotesRemain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)3);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Provider", "ProviderId")
                        .IsUnique();

                    b.ToTable("account", null, t =>
                        {
                            t.HasCheckConstraint("CK_Account_Semester_Range", "(Semester IS NULL OR (Semester >= 0 AND Semester <= 9))");

                            t.HasCheckConstraint("CK_Account_StudentCode_Format", "(StudentCode IS NULL OR UPPER(StudentCode) REGEXP '^(SS|SA|SE|CS|CA|CE|HS|HE|HA|QS|QA|QE|DS|DA|DE)[0-9]{6}$')");
                        });
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.FeedbackVote", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("IX_FeedbackVotes_AccountId");

                    b.HasIndex("VotedAt")
                        .HasDatabaseName("IX_FeedbackVotes_VotedAt");

                    b.ToTable("Feedback_vote", (string)null);
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Quote")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Department");

                    b.HasIndex("Name");

                    b.ToTable("lecture", null, t =>
                        {
                            t.HasCheckConstraint("CK_Lecture_Department_NotEmpty", "CHAR_LENGTH(TRIM(Department)) > 0");

                            t.HasCheckConstraint("CK_Lecture_Name_NotEmpty", "CHAR_LENGTH(TRIM(Name)) > 0");
                        });
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.LectureVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("VotedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("CURDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VotedAt");

                    b.HasIndex("LectureId", "AccountId", "VotedAt")
                        .IsUnique();

                    b.ToTable("lecture_vote", (string)null);
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Expires");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("refresh_token", null, t =>
                        {
                            t.HasCheckConstraint("CK_RefreshToken_Expires_Future", "`Expires` IS NOT NULL");
                        });
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.FeedbackVote", b =>
                {
                    b.HasOne("BE_VotingSystem.Domain.Entities.Account", "Account")
                        .WithOne("FeedbackVote")
                        .HasForeignKey("BE_VotingSystem.Domain.Entities.FeedbackVote", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.LectureVote", b =>
                {
                    b.HasOne("BE_VotingSystem.Domain.Entities.Account", "Account")
                        .WithMany("Votes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_VotingSystem.Domain.Entities.Lecture", "Lecture")
                        .WithMany("Votes")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BE_VotingSystem.Domain.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.Account", b =>
                {
                    b.Navigation("FeedbackVote");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("BE_VotingSystem.Domain.Entities.Lecture", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
